name: "Build Action"
description: "Build Action"

inputs:
  hub:
    description: 'Hub deployment manifest key'
    required: true
  creds:
    description: 'creds secret'
    required: true
  pat:
    description: 'pat secret'
    required: true
  EVO_HUB_INFRA_DEPLOY_KEY:
    description: "123"
    required: true

runs:
  using: "composite"
  steps:
    - name: Use Env
      shell: bash
      env:
        creds: ${{ inputs.creds }}
      run: |
        echo "HUB=${{ inputs.hub }}"

        # Parse Azure secret into Terraform variables
        ARM_CLIENT_ID=$(echo '${{ env.creds }}' | jq -r ".clientId")
        ARM_CLIENT_SECRET=$(echo '${{ env.creds }}' | jq -r ".clientSecret")
        ARM_SUBSCRIPTION_ID=$(echo '${{ env.creds }}' | jq -r ".subscriptionId")
        ARM_TENANT_ID=$(echo '${{ env.creds }}' | jq -r ".tenantId")

        # Save environment variable setup for subsequent steps
        echo "ARM_CLIENT_ID_ENV=${ARM_CLIENT_ID}" >> $GITHUB_ENV
        echo "ARM_CLIENT_SECRET_ENV=${ARM_CLIENT_SECRET}" >> $GITHUB_ENV
        echo "ARM_SUBSCRIPTION_ID_ENV=${ARM_SUBSCRIPTION_ID}" >> $GITHUB_ENV
        echo "ARM_TENANT_ID_ENV=${ARM_TENANT_ID}" >> $GITHUB_ENV

    - name: Use Inputs
      shell: bash
      id: set_var
      run: |
        echo "::add-mask::HUB=${{ inputs.hub }}"
        
        # Parse Azure secret into Terraform variables
        ARM_CLIENT_ID=$(echo '${{ inputs.creds }}' | jq -r ".clientId")
        ARM_CLIENT_SECRET=$(echo '${{ inputs.creds }}' | jq -r ".clientSecret")
        ARM_SUBSCRIPTION_ID=$(echo '${{ inputs.creds }}' | jq -r ".subscriptionId")
        ARM_TENANT_ID=$(echo '${{ inputs.creds }}' | jq -r ".tenantId")

        # Save environment variable setup for subsequent steps
        # echo "ARM_CLIENT_ID=${ARM_CLIENT_ID}" >> $GITHUB_ENV
        # echo "ARM_CLIENT_SECRET=${ARM_CLIENT_SECRET}" >> $GITHUB_ENV
        # echo "ARM_SUBSCRIPTION_ID=${ARM_SUBSCRIPTION_ID}" >> $GITHUB_ENV
        # echo "ARM_TENANT_ID=${ARM_TENANT_ID}" >> $GITHUB_ENV
        
        echo "::set-output name=client_id::$ARM_CLIENT_ID"
        echo "::set-output name=client_secret::$ARM_CLIENT_SECRET"
        echo "::set-output name=sub_id::$ARM_SUBSCRIPTION_ID"
        echo "::set-output name=tenant_id::$ARM_TENANT_ID"
        
        echo "::add-mask::PAT=${PAT}" >> $GITHUB_ENV

    - name: Setup ssh key # There are actions for this but prefer not to use a 3rd party here for private keys
      shell: bash
      env:
        ARM_CLIENT_ID: ::add-mask::${{ steps.set_var.outputs.client_id }}
        ARM_CLIENT_SECRET: ::add-mask::${{ steps.set_var.outputs.client_secret }}
        ARM_SUBSCRIPTION_ID: ::add-mask::${{ steps.set_var.outputs.sub_id }}
        ARM_TENANT_ID: ::add-mask::${{ steps.set_var.outputs.tenant_id }}
      run: |
        echo "::add-mask::${{ inputs.EVO_HUB_INFRA_DEPLOY_KEY }}" > id_rsa
